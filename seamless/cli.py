import functools
import getpass
import grp
import logging
import subprocess
import os
import sys
import tempfile
import random

import click

from seamless.signer import Signer


logger = logging.getLogger(__name__)
LOG_FILE_PATH = '/var/log/seamless/seamless.log'
USER_GROUP = 'seamless'


def system_setup():
    try:
        grp.getgrnam(USER_GROUP)
    except KeyError:
        print('group "{}" does not exist. creating.'.format(USER_GROUP))
        print(subprocess.check_output('addgroup {}'.format(USER_GROUP), shell=True))
    if not os.path.exists(LOG_FILE_PATH):
        print('log file {} does not exist. creating'.format(LOG_FILE_PATH))
        subprocess.check_output('''
            mkdir -p {log_dir};
            touch {log_file};
            chown -R root:{group} {log_dir};
            chmod 0750 {log_dir};
            chmod 0620 {log_file};
        '''.format(
            log_dir=os.path.dirname(LOG_FILE_PATH),
            log_file=LOG_FILE_PATH,
            group=USER_GROUP,
        ), shell=True)


class Scope(object):
    def __init__(self, name):
        self.name = name

    @property
    def secret_file(self):
        return os.path.join(self.path, 'secret')

    @property
    def authorized_keys_file(self):
        return os.path.join(self.path, '.ssh/authorized_keys')

    @property
    def key_dir(self):
        return os.path.join(self.path, 'keys')

    @property
    def path(self):
        return os.path.expanduser('~{}'.format(self.name))

    def init(self, secret=None):
        system_setup()
        print("creating user {}, home={}".format(self.name, self.path))
        subprocess.check_output('useradd {name} --create-home --skel {skel} --comment "seamless user"'.format(
            name=self.name,
            skel=tempfile.mkdtemp(),
        ), shell=True)
        ssh_dir = os.path.join(self.path, '.ssh')
        os.mkdir(ssh_dir)
        os.mkdir(self.key_dir)
        if not secret:
            secret = '%x' % random.getrandbits(256)
        with open(self.secret_file, 'w') as f:
            f.write(secret.strip())
        subprocess.check_output("""
            touch {key_file};
            chown -R {user}:{user} {home_dir};
            chmod 400 {secret_file};
            chmod 700 {ssh_dir}
        """.format(
            user=self.name,
            secret_file=self.secret_file,
            key_file=self.authorized_keys_file,
            home_dir=self.path,
            ssh_dir=ssh_dir,
        ), shell=True)

    @property
    def signer(self):
        with open(self.secret_file, 'r') as f:
            return Signer(f.read())

    def get_token(self, username):
        return self.signer.sign(username)

    def sync(self):
        lines = []
        for filename in os.listdir(self.key_dir):
            print filename
            if not filename.endswith('.pub'):
                continue
            user = filename[:-4]
            path = os.path.join(self.key_dir, filename)
            command = '{python} -m seamless.cli token {name} --user {user}'.format(python=sys.executable, name=self.name, user=user)
            with open(path, 'r') as f:
                key = f.read()
                lines.append('command="{command}",no-port-forwarding,no-X11-forwarding,no-agent-forwarding,no-pty {key}\n'.format(
                    command=command,
                    key=key.strip(),
                    user=user,
                ))

        with open(self.authorized_keys_file, 'w') as f:
            f.write('# autogenerated by seamless. do not edit.\n')
            for line in lines:
                f.write(line)
        subprocess.check_output('chmod 400 {key_file}; chown {user}:{user} {key_file}'.format(user=self.name, key_file=self.authorized_keys_file), shell=True)


def require_root(cmd):
    @functools.wraps(cmd)
    def wrapped_command(*args, **kwargs):
        if getpass.getuser() != 'root':
            print("must be root")
            sys.exit(1)
        return cmd(*args, **kwargs)
    return wrapped_command


@click.group()
def main():
    if os.path.exists(LOG_FILE_PATH):
        logger.addHandler(logging.FileHandler(LOG_FILE_PATH))
        logger.setLevel(logging.INFO)
    logger.info('main: %s', ' '.join(sys.argv))


@main.command()
@click.argument('name')
@click.option('--secret')
@require_root
def init(name, secret):
    scope = Scope(name)
    scope.init()


@main.command()
@click.argument('name')
@click.option('--user')
def token(name, user):
    try:
        scope = Scope(name)
        print scope.get_token(user)
    except:
        # don't leak exceptions to clients
        logger.exception('token creation failed')


@main.command()
@click.argument('name')
@require_root
def sync(name):
    scope = Scope(name)
    scope.sync()


if __name__ == '__main__':
    main()
